% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assertthat.R
\name{assertions}
\alias{assertions}
\alias{is_class}
\alias{is_hermes_data}
\alias{is_counts_vector}
\alias{is_list_with}
\alias{one_provided}
\alias{is_constant}
\title{Additional Assertions for \code{assert_that}}
\usage{
is_class(object, class2)

is_hermes_data(object)

is_counts_vector(x)

is_list_with(x, elements)

one_provided(one, two)

is_constant(x)
}
\arguments{
\item{object}{any object.}

\item{class2}{(\code{character} or class definition)\cr the class to which \code{object} could belong.}

\item{x}{An object to check.}

\item{elements}{(\code{character})\cr names of elements which should be in the list \code{x}.}

\item{one}{first input.}

\item{two}{second input.}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

We provide additional assertion functions which can be used together with
\code{\link[assertthat:assert_that]{assertthat::assert_that()}}.
}
\section{Functions}{
\itemize{
\item \code{is_class}: checks the class.

\item \code{is_hermes_data}: checks the class.

\item \code{is_counts_vector}: checks for a vector of counts (positive integers).

\item \code{is_list_with}: checks for a list containing elements.

\item \code{one_provided}: checks that exactly one of two inputs is not \code{NULL}.

\item \code{is_constant}: checks for a column being constant.
}}

\examples{
a <- 5
is_class(a, "character")
is_hermes_data(HermesData(summarized_experiment))
is_hermes_data(42)
a <- 5
is_class(a, "character")
b <- list(a = 5, b = 3)
is_list_with(b, c("a", "c"))
is_list_with(b, c("a", "b"))
a <- 10
b <- 10
one_provided(a, b)
one_provided(a, NULL)
is_constant(c(1, 2))
is_constant(c(NA, 1))
is_constant(c("a", "a"))
}
