% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pca.R
\docType{class}
\name{calc_pca}
\alias{calc_pca}
\alias{HermesDataPca-class}
\alias{.HermesDataPca}
\alias{HermesDataPca}
\title{Principal Components Analysis Calculation}
\usage{
calc_pca(object, assay_name = "counts")
}
\arguments{
\item{object}{(\code{AnyHermesData}) \cr input.}

\item{assay_name}{(\code{string}) \cr Indicating the name of the assay
of interest, with possible options: \code{counts}, \code{cpm}, \code{tpm}, \code{rpkm}, \code{voom}.
Default assay is \code{counts}.}
}
\value{
A \link{HermesDataPca} object which is an extension of the \link[stats:prcomp]{stats::prcomp} class.
}
\description{
Perform principal components analysis of the gene count vectors across all
samples.
}
\details{
\itemize{
\item PCA should be performed after filtering out low quality genes and samples and
normalization.
\item In addition, genes with constant counts across all samples are excluded from
the analysis internally.
\item Centering and scaling is applied internally.
\item Plots can be obtained with the \code{\link[ggplot2:autoplot]{ggplot2::autoplot()}} function
with the corresponding method from the \code{ggfortify} package to plot the
results of a principal components analysis saved in a \link{HermesDataPca}
object. See \code{\link[ggfortify:autoplot.pca_common]{ggfortify::autoplot.prcomp()}} for details.
}
}
\examples{
object <- HermesData(summarized_experiment) \%>\%
  add_quality_flags() \%>\%
  filter() \%>\%
  normalize()
result <- calc_pca(object, assay_name = "tpm")
summary(result)

autoplot(result)
autoplot(result, x = 2, y = 3)
autoplot(result, variance_percentage = FALSE)
autoplot(result, label = TRUE)
}
